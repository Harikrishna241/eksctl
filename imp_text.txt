1)Commnad to check the containers in a pod 
--------------------------------------------
    kubectl get pods green -o jsonpath='{.spec.containers[*].name}'
    kubectl get pods --all-namespaces -o jsonpath='{.spec.containers[*].name}'


2) How to create a pod with dsired containers 


List all Container images in all namespaces
--------------------------------------------
kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec['initContainers', 'containers'][*].image}" |\
tr -s '[[:space:]]' '\n' |\
sort |\
uniq -c

3) how list all containers in a pod 
kubectl get pod -o="custom-columns=NAME:.metadata.name,INIT-CONTAINERS:.spec.initContainers[*].name,CONTAINERS:.spec.containers[*].name"

If any cluster not deleted any eksctl
--------------------------------------
aws --region $REGION cloudformation delete-stack --stack-name eksctl-$CLUSTER_NAME-cluster

If the cluster not deleting properly:
4) eksctl delete cluster -f eksctl.yaml  --disable-nodegroup-eviction

to enter to a pod ,bekow is the command 
---------------------------------------
kubectl exec -n green -it nginx-t-6997f8fcff-rxfvq -- bash

to check the basic logs of a pod if the pod is in pending state 
---------------------------------------------------------------
kubectl  describe pod nginx-t-6997f8fcff-sl8x5 -n green
it will describes the basic info of the logs whther it got scheduled or not and the reason ,why it not got scheduled 

https://sysdig.com/blog/kubernetes-pod-pending-problems/

three resons why he pod is in pending state ;
1) Persistent volume; sock shop data volume
2) Confimap dependencies : sock shop configmap
3) Secrets : sock shop certs

kubectl get – List resources
kubectl describe – Show detailed information about a resource
kubectl apply – Apply a configuration to a resource by filename or stdin
kubectl create – Create a resource from a file or from stdin
kubectl delete – Delete resources by filenames, resources and names, or by using the resources and label selector.


Significance of ‘Kubectl’ Command
‘kubectl’ is a crucial component of the Kubernetes ecosystem. kubectl commands are highly useful for carrying out a variety of tasks related to managing and interacting with a Kubernetes cluster. It mainly helps in:

Cluster management: kubectl provides a simple and convenient way to manage the resources in a Kubernetes cluster, including pods, services, Kubernetes deployments, and other components.
Application deployment: kubectl can be used to deploy, update, and manage the applications running on a Kubernetes cluster. It supports deployment strategies such as rolling updates and blue-green deployments.
Resource management: kubectl allows you to manage the resources in a cluster, including scaling, updating, and deleting resources.
Debugging and troubleshooting: kubectl provides various commands and options to help you debug problems with your cluster and its components, including pods, services, and deployments.
Automation: kubectl can be easily integrated into scripts and automation workflows to manage your cluster in an automated and repeatable manner.
Overall, kubectl is a powerful tool that makes it easy to manage and interact with a Kubernetes cluster, making it a critical component for DevOps and cloud-native infrastructure teams.


To get ipaddress of all pods in a node:
----------------------------------------
kubectl get pods --output=wide -n green

    or 
kubectl get pods -o wide 

